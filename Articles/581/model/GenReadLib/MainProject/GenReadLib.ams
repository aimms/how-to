## ams_version=1.0

Model Main_GenReadLib {
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: {
				century->s : #-># * 3153600000,
				year->s : #-># * 31536000,
				month->s : #-># * 2628000,
				week->s : #-># * 604800,
				day->s : #-># * 86400,
				hour->s : #-># * 3600,
				minute->s : #-># * 60,
				second->s : #-># ,
				tick->s : #-># / 100
			}
			Comment: "Expresses the value for the duration of periods.";
		}
	}
	Section Application_initialization_and_termination {
		Procedure MainInitialization {
			Comment: "Add initialization statements here that do NOT require any library being initialized already.";
		}
		Procedure PostMainInitialization {
			Comment: {
				"Add initialization statements here that require that the libraries are already initialized properly,
				or add statements that require the Data Management module to be initialized."
			}
		}
		Procedure pr_startup {
			Comment: "Ran at the end of initialization.";
		}
		Procedure PreMainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that require all libraries to be still alive.
				Return 1 if you allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence."
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that do not require all libraries to be still alive.
				Return 1 to allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence.
				It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
			}
		}
	}
	Section Generate_Runtime_Lib {
		StringParameter sp_connectionString {
			InitialData: "../data/abc.dsn";
		}
		StringParameter sp_libName {
			Definition: "dataReadingLibrary";
		}
		StringParameter sp_prefix {
			Definition: "drl";
		}
		ElementParameter ep_lib {
			Range: AllIdentifiers;
		}
		StringParameter sp_bodyLineProcAll;
		StringParameter sp_bodyProcAll;
		ElementParameter ep_procAll {
			Range: AllIdentifiers;
		}
		ElementParameter ep_mod {
			Range: AllIdentifiers;
		}
		ElementParameter ep_set {
			Range: AllIdentifiers;
		}
		ElementParameter ep_index {
			Range: AllIdentifiers;
		}
		Procedure pr_createRuntimeLibrary {
			Body: {
				block ! Initialize to empty runtime library.
					ep_lib := StringToElement( AllIdentifiers, sp_libName );
					if ep_lib then
						me::Delete( ep_lib );
						ep_lib := '' ;
					endif ;
					ep_lib := me::CreateLibrary( sp_libName, sp_prefix );
				endblock ;
				
				block ! For each table, create a module.
					p_noTables := SQLNumberOfTables( sp_connectionString );
					p_tableNo := 1 ;
					while p_tableNo <= p_noTables do
						sp_tableName := SQLTableName( sp_connectionString, p_tableNo );
						pr_createRuntimeModuleTable( sp_connectionString, sp_tableName );
						p_tableNo += 1 ;
					endwhile ;
				endblock ;
			}
			Parameter p_noTables;
			Parameter p_tableNo;
			StringParameter sp_tableName;
		}
		Procedure pr_createRuntimeModuleTable {
			Arguments: (sp_connectionString,sp_tableName);
			DeclarationSection Argument_declarations {
				StringParameter sp_tableName {
					Property: Input;
				}
				StringParameter sp_connectionString {
					Property: Input;
				}
			}
		}
	}
	Procedure MainExecution;
}
