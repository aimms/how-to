## ams_version=1.0

Model Main_OAuth_Example {
	Section Google_Authorization_Code_Flow {
		Procedure GoogleExample_AuthorizationCodeFlow {
			Body: {
				!this will follow the Google Authentication Code Flow to retrieve your own (logged in) user data
				
				!first read all mappings
				dex::ReadAllMappings;
				
				!empty UserInfo_Data, just to make sure we start off clean
				empty dex::oauth::UserInfo_Data;
				
				!load data into an APIClient we name 'Google'
				dex::oauth::APIClients := data { Google };
				
				!set data for 'Google'
				dex::oauth::APIClientStringData('Google',dex::oauth::apidata) :=$ data { 
						authorizationEndpoint : "https://accounts.google.com/o/oauth2/v2/auth", 
				  		tokenEndpoint : "https://oauth2.googleapis.com/token", 
				  		openIDEndpoint : "https://www.googleapis.com/oauth2/v3/userinfo",
				  		clientId : "", 
						clientSecret : "", 
						scope: "openid profile"
					};
				
				!get data from Google
				dex::oauth::GetUserInfo('Google');
			}
		}
	}
	Section Azure_Authorization_Code_Flow {
		Procedure AzureExample_AuthorizationCodeFlow {
			Body: {
				!this will follow the Azure Authentication Code Flow to retrieve your own (logged in) user data
				
				!empty UserInfo_Data, just to make sure we start off clean
				empty dex::oauth::UserInfo_Data;
				
				!load data into an APIClient we name 'MSACF'
				dex::oauth::APIClients := data { MSACF };
				
				!set data for 'MSACF'
				dex::oauth::APIClientStringData('MSACF',dex::oauth::apidata) :=$ data { 
						authorizationEndpoint : "https://login.microsoftonline.com/[tenantID]/oauth2/v2.0/authorize", 
				  		tokenEndpoint : "https://login.microsoftonline.com/[tenantID]/oauth2/v2.0/token", 
				  		openIDEndpoint : "https://graph.microsoft.com/v1.0/me",
				  		clientId : "", 
						clientSecret : "", 
						scope: "https://graph.microsoft.com/User.Read"
					};
				
				!perform the actual request and get the data from Azure
				dex::oauth::GetUserInfo('MSACF');
				
				!because we want to
			}
		}
	}
	Section Azure_Client_Credentials_Flow {
		Procedure AzureExample_ClientCredentialsFlow {
			Body: {
				!read mappings
				dex::ReadAllMappings;
				
				!empty UserInfo_Data, just to make sure we start off clean
				empty dex::oauth::UserInfo_Data;
				
				!create client
				dex::oauth::APIClients := data { MS };
				dex::oauth::APIClientStringData('MS',dex::oauth::apidata) :=$ data { 
				  		tokenEndpoint : "https://login.microsoftonline.com/[tenantID]/oauth2/v2.0/token", 
				  		clientId : "", 
						clientSecret : "", 
						scope: "https://graph.microsoft.com/.default"
					};
				
				!first create the request
				dex::client::NewRequest(
				            "getUser",
				            "https://graph.microsoft.com/v1.0/users/[userIdentifier]",
				            'Callback',
				            responsefile:"Output.json",
				            tracefile:"Trace.xml"
				    	);
				
				!add bearer token
				dex::oauth::AddBearerToken('MS', "getUser");
				
				!perform the request
				dex::client::PerformRequest(
				            "getUser"
				    	);
				
				!wait for response
				dex::client::WaitForResponses(
				            1000
				    	);
				
				!close request properly
				dex::client::CloseRequest(
				            "getUser"
				);
				
				!now read and map the data properly for WebUI
				AzureExample_ReadData;
			}
		}
		Procedure AzureExample_ReadData {
			Body: {
				!add mapping for user info items
				dex::AddMapping(
				            "UserInfoMapping",
				            "Mappings/UserInfoMapping.xml"
				);
				
				!read the retrieved output from the json with the defined mapping
				dex::ReadFromFile(
				            "Output.json",
				            "UserInfoMapping",
				            1,
				            1,
				            1
				);
				
				!set the parameters to show in the WebUI
				ep_userInfoItem := StringToElement(dex::oauth::UserInfoItems, "displayName", 1);
				dex::oauth::APIUserInfo('MS', ep_userInfoItem) := sp_nameMS;
				ep_userInfoItem := StringToElement(dex::oauth::UserInfoItems, "jobTitle", 1);
				dex::oauth::APIUserInfo('MS', ep_userInfoItem) := sp_jobMS;
				ep_userInfoItem := StringToElement(dex::oauth::UserInfoItems, "mail", 1);
				dex::oauth::APIUserInfo('MS', ep_userInfoItem) := sp_mailMS;
				ep_userInfoItem := StringToElement(dex::oauth::UserInfoItems, "mobilePhone", 1);
				dex::oauth::APIUserInfo('MS', ep_userInfoItem) := sp_phoneMS;
			}
		}
		StringParameter sp_phoneMS;
		StringParameter sp_mailMS;
		StringParameter sp_jobMS;
		StringParameter sp_nameMS;
		ElementParameter ep_userInfoItem {
			Range: dex::oauth::UserInfoItems;
		}
		Procedure Callback {
			Arguments: (theRequest,statusCode,errorCode);
			StringParameter theRequest {
				Property: Input;
			}
			Parameter statusCode {
				Property: Input;
			}
			Parameter errorCode {
				Property: Input;
			}
		}
	}
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: minute->s : #-># * 60;
			Comment: {
				"Expresses the value for the duration of periods.
				
				The unit s has been added automatically because it is a required unit for AimmsWebUI.
				
				The unit minute has been added automatically because it is a required unit for AimmsWebUI."
			}
		}
	}
}
