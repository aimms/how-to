## ams_version=1.0

Model Main_Stopwatch {
	Section Application_Units_of_Measurement {
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: {
				tick->s : #-># / 100,
				minute->s : #-># * 60,
				hour->s : #-># * 3600,
				day->s : #-># * 86400,
				week->s : #-># * 604800,
				month->s : #-># * 2628000,
				year->s : #-># * 31536000,
				century->s : #-># * 3153600000
			}
			Comment: "Expresses the value for the duration of periods.";
		}
	}
	Procedure pr_LongRunningProcedure {
		Body: {
			dialogMessage("Press OK when you're bored watching this message.");
		}
	}
	Procedure MainExecution {
		Body: {
			! Measuring time of some long running procedure.
			stopwatch::pr_start() ;
			pr_LongRunningProcedure  ;
			p_elapsedTime := stopwatch::fnc_elapsed();
			
			! Reporting of that time, whereever.
			sp_runTime := formatString("Execution of procedure took %n seconds", p_elapsedTime );
			! DialogMessage(sp_runTime);
		}
		StringParameter sp_runTime;
		Parameter p_elapsedTime {
			Unit: s;
		}
	}
	Section Application_initializtion_and_termination {
		Procedure MainInitialization {
			Comment: "Add initialization statements here that do NOT require any library being initialized already.";
		}
		Procedure PostMainInitialization {
			Body: {
				return ;
				!gmp::instance::CreateSolverSession
			}
			Comment: {
				"Add initialization statements here that require that the libraries are already initialized properly,
				or add statements that require the Data Management module to be initialized."
			}
		}
		Procedure PreMainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that require all libraries to be still alive.
				Return 1 if you allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence."
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that do not require all libraries to be still alive.
				Return 1 to allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence.
				It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
			}
		}
	}
}
