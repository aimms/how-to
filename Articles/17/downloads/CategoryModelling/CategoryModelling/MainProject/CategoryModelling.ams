## ams_version=1.0

Model Main_CategoryModelling {
	DeclarationSection Input_Identifiers {
		Set s_sizes {
			Index: i_size;
			Definition: data { Small, Medium, Large };
		}
		Set s_orders {
			Index: i_order;
			Definition: ElementRange(1, 5, 1, "Order ");
		}
		Parameter p_def_price {
			IndexDomain: i_size;
			Definition: data { Small : 3,  Medium : 5,  Large : 7 };
		}
		ElementParameter ep_def_orderSize {
			IndexDomain: i_order;
			Range: s_sizes;
			Definition: data { 'Order 1' : Small,  'Order 2' : Medium,  'Order 3' : Large,  'Order 4' : Large,  'Order 5' : Small };
		}
	}
	DeclarationSection Calculated_Identifiers {
		Parameter p_def_relationSizeOrder {
			IndexDomain: (i_size,i_order);
			Range: binary;
			Definition: 1 $ (ep_def_orderSize(i_order) = i_size);
		}
		Parameter p_def_orderCost_OPTION1 {
			IndexDomain: i_order;
			Definition: p_def_price(ep_def_orderSize(i_order));
		}
		Parameter p_def_orderCost_OPTION2 {
			IndexDomain: i_order;
			Definition: {
				sum(i_size | 
				        p_def_relationSizeOrder(i_size, i_order),
				    p_def_price(i_size))
			}
		}
	}
	Procedure MainInitialization {
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure PostMainInitialization {
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution;
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: minute->s : #-># * 60;
			Comment: {
				"Expresses the value for the duration of periods.
				
				The unit s has been added automatically because it is a required unit for AimmsWebUI.
				
				The unit minute has been added automatically because it is a required unit for AimmsWebUI."
			}
		}
	}
}
