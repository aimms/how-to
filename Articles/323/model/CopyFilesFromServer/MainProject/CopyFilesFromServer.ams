## ams_version=1.0

Model Main_CopyFilesFromServer {
	Parameter p_NoFiles;
	StringParameter sp_SourceFolder {
		Comment: "\"/PublicData/project data/SharingIsRewarding/Resources/C_Mathematical_Modeling/Images\"";
	}
	StringParameter sp_TargetFolder {
		InitialData: "C:\\temp";
	}
	Procedure pr_Startup;
	DeclarationSection File_declarations {
		Set s_AllFileNumbers {
			SubsetOf: Integers;
			Index: i_afn;
			Property: ElementsAreLabels;
		}
		StringParameter sp_AllFilenames {
			IndexDomain: i_afn;
		}
		StringParameter sp_AllFiletimes {
			IndexDomain: i_afn;
		}
		Parameter p_AllFilesizes {
			IndexDomain: i_afn;
		}
		Parameter p01_Selection {
			IndexDomain: i_afn;
			Range: binary;
		}
	}
	Section Select_Folder_on_PRO_Storage {
		StringParameter sp_FolderToSelect;
		Set s_EnumFolders {
			SubsetOf: Integers;
			Index: i_ef;
			Property: ElementsAreLabels;
		}
		StringParameter sp_subFolders {
			IndexDomain: i_ef;
		}
		Parameter p01_AcceptSelection {
			Range: binary;
			InitialData: 1;
		}
		StringParameter sp_SelectStorageFolder_PageTitle;
		Procedure pr_SelectStorageFolder {
			Arguments: (sp_Folder,sp_Title);
			Body: {
				sp_SelectStorageFolder_PageTitle := if sp_Title then sp_Title else "Please select folder" endif ;
				
				sp_FolderToSelect := sp_Folder;
				pr_GetFolders( sp_FolderToSelect, s_EnumFolders, sp_subFolders );
				pageOpen( "DialogSelectStorageFolder" );
				if   p01_AcceptSelection then
					sp_Folder := sp_FolderToSelect ;
				endif ;
			}
			StringParameter sp_Folder {
				Property: InOut;
			}
			StringParameter sp_Title {
				Property: Optional;
			}
		}
		Procedure pr_SelectStorageFolder_DoubleClick {
			Arguments: (ep_ef);
			Body: {
				sp_FolderToSelect += "/" + sp_subFolders(ep_ef);
				empty s_EnumFolders ;
				pr_GetFolders( sp_FolderToSelect, s_EnumFolders, sp_subFolders );
			}
			ElementParameter ep_ef {
				Range: s_EnumFolders;
				Property: Input;
			}
		}
		Procedure pr_SelectStorageFolder_Up {
			Body: {
				p_lastPosSlash := FindNthString( sp_FolderToSelect, "/", -1 );
				if p_lastPosSlash then 
					sp_FolderToSelect := substring( sp_FolderToSelect, 1, p_lastPosSlash-1 );
					empty s_EnumFolders ;
					pr_GetFolders( sp_FolderToSelect, s_EnumFolders, sp_subFolders );
				endif ;
			}
			Parameter p_lastPosSlash;
		}
		Procedure pr_SelectStorageFolder_OK {
			Body: {
				pageclose( "DialogSelectStorageFolder" );
				p01_AcceptSelection := 1 ;
			}
		}
		Procedure pr_SelectStorageFolder_Cancel {
			Body: {
				pageclose( "DialogSelectStorageFolder" );
				p01_AcceptSelection := 0 ;
			}
		}
	}
	Procedure pr_SelectSourceFolder {
		Body: {
			pr_SelectStorageFolder( sp_SourceFolder, "Please select source folder" );
		}
	}
	Procedure pr_SelectMyData {
		Body: {
			sp_SourceFolder := "/Userdata/" + pro::GetPROEnvironment() + "/" + pro::GetPROUserName();
		}
	}
	Procedure pr_SelectTargetFolder {
		Body: {
			DirectorySelect(
				directoryname :  sp_TargetFolder, 
				directory     :  sp_TargetFolder, 
				title         :  "Select target folder");
		}
	}
	Procedure pr_DetermineInputFiles {
		Body: {
			!DebuggerBreakpoint();
			empty s_AllFileNumbers ;
			pr_GetAllFiles(
				spInpPath    :  sp_SourceFolder, 
				sFileNumbers :  s_AllFileNumbers, 
				spFileNames  :  sp_AllFilenames, 
				spFileTimes  :  sp_AllFiletimes, 
				pFileSizes   :  p_AllFilesizes);
			
			p_NoFiles := card( s_AllFileNumbers );
			
			! Remove the source path from each filename.
			p_PrefixLen := StringLength( sp_SourceFolder );
			sp_AllFilenames(i_afn) := SubString( sp_AllFilenames(i_afn),  p_PrefixLen+2, StringLength( sp_AllFilenames(i_afn) ) );
			
			p01_Selection(i_afn) := 1 ;
		}
		Parameter p_PrefixLen;
	}
	Section SectionRetrieveFileFromCentralStorage {
		StringParameter sp_errmsg;
		StringParameter sp_errSrcFile;
		StringParameter sp_errTrgFile;
		ElementParameter ep_errFileNo {
			Range: s_AllFileNumbers;
		}
		Parameter p01_errCancel {
			Range: binary;
			InitialData: 0;
		}
		Procedure pr_RetrieveFileFromCentralStorage {
			Arguments: (sp_src,sp_trg,ep_fn);
			Body: {
				block
					pro::RetrieveFileFromCentralStorage( sp_src, sp_trg );
				onerror ep_err do
					sp_errMsg := errh::Message(ep_err);
					sp_errSrcFile := sp_src ;
					sp_errTrgFile := sp_trg ;
					ep_errFileNo  := ep_fn ;
					pageOpen( "dialogErrorCopyFile" );
					errh::MarkAsHandled( ep_err );
				endblock ;
			}
			DeclarationSection Argument_Declarations {
				StringParameter sp_src {
					Property: Input;
				}
				StringParameter sp_trg {
					Property: Input;
				}
				ElementParameter ep_fn {
					Range: s_AllFileNumbers;
					Property: Input;
				}
			}
			DeclarationSection Error_Handling_Declarations {
				ElementParameter ep_err {
					Range: errh::PendingErrors;
				}
			}
		}
		Procedure pr_ErrorHandlingDIalog_OK {
			Body: {
				pageclose( "dialogErrorCopyFile" );
			}
		}
	}
	Procedure pr_CopyFiles {
		Body: {
			!DebuggerBreakpoint();
			
			sp_loc_SourceFolder := sp_SourceFolder ;
			sp_loc_TargetFolder := sp_TargetFolder ;
			
			pr_EndsIn( sp_loc_SourceFolder, "/", "\\" );
			pr_EndsIn( sp_loc_TargetFolder, "\\", "/" );
			
			for i_afn | 
				( 	p01_Selection(i_afn) and  
					p01_errCancel = 0        )
			do
			
				sp_SourceFilename := sp_loc_SourceFolder + sp_AllFilenames( i_afn );
				sp_TargetFilename := sp_loc_TargetFolder + sp_AllFilenames( i_afn );
			
				block ! Ensure the required folder structure exists 
					sp_TargetFilename := FindReplaceStrings( sp_TargetFilename , "/", "\\" ) ;
					p_TargetLen := StringLength( sp_TargetFilename );
					if Substring( sp_TargetFilename, 2, 2 ) = ":" then
						p_StartPos := 4 ;
					else 
						p_StartPos := 1 ;
					endif ;
					p_endPos := p_StartPos + FindString( subString( sp_TargetFilename, p_StartPos, p_TargetLen ), "\\" ) - 2;
					while p_endPos > p_StartPos do
						sp_ExpectedFolder := subString( sp_TargetFilename, 1, p_endPos );
						if not DirectoryExists( sp_ExpectedFolder ) then
							DirectoryCreate( sp_ExpectedFolder );
						endif ;
						p_StartPos := p_endPos + 2 ;
						p_endPos := p_StartPos + FindString( subString( sp_TargetFilename, p_StartPos, p_TargetLen ), "\\" ) - 2;
					endwhile ;
				endblock ;
			
				! Actually copy file.
				pr_RetrieveFileFromCentralStorage( sp_SourceFilename, sp_TargetFilename, i_afn );
			
				DialogProgress(
					formatString("Copying files, %e of %i files copied", i_afn, p_noFiles),
					100 * ( i_afn / p_noFiles ) );
			
			endfor ;
		}
		StringParameter sp_SourceFilename;
		StringParameter sp_TargetFilename;
		StringParameter sp_loc_Sourcefolder;
		StringParameter sp_loc_Targetfolder;
		Parameter p_StartPos;
		Parameter p_EndPos;
		Parameter p_TargetLen;
		StringParameter sp_ExpectedFolder;
		Parameter sp_RestTargetFilename;
	}
	Procedure pr_EndsIn {
		Arguments: (sp_Str,sp_Char,sp_Alt);
		Body: {
			p_strLen := StringLength( sp_Str);
			if p_strLen then
				sp_endChar := Substring( sp_Str, p_StrLen, p_strLen);
				if ( sp_endchar <> sp_Char ) and 
				   ( sp_endchar <> sp_Alt  )     then
				   	sp_Str += sp_Char ;
				endif ;
			else
				sp_Str := sp_Char ;
			endif ;
		}
		StringParameter sp_Str {
			Property: InOut;
		}
		StringParameter sp_Char {
			Property: Input;
		}
		Parameter p_strLen;
		StringParameter sp_Alt {
			Property: Input;
		}
		StringParameter sp_endchar;
	}
	Section Utils_recursively_visit_PRO_Storage_Folder_Structture {
		StringParameter spMySlash {
			Definition: "/";
		}
		Procedure pr_GetFolders {
			Arguments: (spInpPath,sFolderNumbers,sFolderNames);
			Body: {
				if not pro::GetPROEndPoint() then return; endif ;
				
				pro::NormalizeStoragePath(spInpPath);
				ret := pro::storage::ListBuckets(
					path       :  spInpPath, 
					BucketSet  :  sLocBucketSet, 
					BucketSize :  pLocBucketSize, 
					BucketAuth :  spLocBucketAuth, 
					BucketDate :  spLocBucketDate);
				empty sFolderNumbers;                	
				for i_bs do
					SetElementAdd(sFolderNumbers,eFN,FormatString("%i",card(sFolderNumbers)+1));
					if eFN <> last( sFolderNumbers ) then raise error "internal error" ; endif ;
					sFolderNames(eFN) := i_bs ;
				endfor ;
				return card(sLocBucketSet);
			}
			Set sFolderNumbers {
				Index: iFN;
				Parameter: eFN;
				Property: Output;
			}
			StringParameter spInpPath {
				Property: Input;
			}
			StringParameter sFolderNames {
				IndexDomain: iFN;
				Property: Output;
			}
			DeclarationSection Local_declarations {
				Parameter ret;
				Set sLocBucketSet {
					Index: i_bs;
				}
				Parameter pLocBucketSize {
					IndexDomain: i_bs;
				}
				StringParameter spLocBucketAuth {
					IndexDomain: i_bs;
				}
				StringParameter spLocBucketDate {
					IndexDomain: i_bs;
				}
			}
		}
		Procedure pr_GetAllDirectories {
			Arguments: (spInpPath,sAllDirectoryNumbers,spAllDirectoryNames);
			Body: {
				block ! Initialize Directory List to "only root directory"
					sAllDirectoryNumbers := data { 1 };
					eADN := first( sAllDirectoryNumbers );
					spAllDirectoryNames(eADN) := spInpPath ;
					pNoVisitedDirectories := 0 ;
					pLastDirectoryToBeVisited := 1 ;
				endblock ;
				
				while pNoVisitedDirectories < pLastDirectoryToBeVisited do
				
					DialogProgress(
						formatString("Phase 1, obtaining folders %i of %i handled", pNoVisitedDirectories, pLastDirectoryToBeVisited),
						100 * ( pNoVisitedDirectories / pLastDirectoryToBeVisited ) );
				
					! Move to the next folder
					pNoVisitedDirectories += 1;
					eADN := pNoVisitedDirectories ;
					spCurrentDirectory := spAllDirectoryNames(eADN);
				
					! Get the directory names inside spCurrentDirectory
					res := pr_GetFolders( spCurrentDirectory, sRecentDirectoryNumbers, spRecentDirectoryNames );
					pNoRegisteredDirectoryNames := 0 ;
					while pNoRegisteredDirectoryNames < res do
						pNoRegisteredDirectoryNames += 1 ;
						eRDN := pNoRegisteredDirectoryNames ;
						sAllDirectoryNumbers += ( pLastDirectoryToBeVisited + pNoRegisteredDirectoryNames );
						eADN := ( pLastDirectoryToBeVisited + pNoRegisteredDirectoryNames );
						spAllDirectoryNames( eADN ) := spCurrentDirectory + spMySlash + spRecentDirectoryNames( eRDN );
					endwhile ; 
					pLastDirectoryToBeVisited += res ;
				
				endwhile ;
			}
			StringParameter spInpPath {
				Property: Input;
			}
			Set sAllDirectoryNumbers {
				SubsetOf: Integers;
				Index: iADN;
				Parameter: eADN;
				Property: ElementsAreLabels;
			}
			StringParameter spAllDirectoryNames {
				IndexDomain: iADN;
				Property: Output;
			}
			DeclarationSection Local_declarations {
				Parameter pNoVisitedDirectories;
				Parameter pLastDirectoryToBeVisited;
				Parameter pLastFileToBeVisited;
				StringParameter spCurrentDirectory;
				Set sRecentDirectoryNumbers {
					SubsetOf: Integers;
					Index: iRDN;
					Parameter: eRDN;
					Property: ElementsAreLabels;
				}
				StringParameter spRecentDirectoryNames {
					IndexDomain: iRDN;
				}
				Parameter pNoRegisteredDirectoryNames;
				Parameter res;
			}
		}
		Procedure pr_GetFiles {
			Arguments: (spInpPath,sFileNumbers,spFileNames,spFileTimes,pFileSizes);
			Body: {
				if not pro::GetPROEndPoint() then return; endif ;
				
				ret := pro::storage::ListObjects(spInpPath,sChildrenObj,spChildrenObjName,spChildrenObjType,pChildrenObjSize,spChildrenObjAuth);
				if not pro::HandleError(ret,"pro::storage::ListObjects") then 
					return 0; 
				endif; 
				res := card( sChildrenObj );
				for CURPATH_OBJ do
					sFileNumbers += ord( CURPATH_OBJ );
					ep_fin := last( sFileNumbers );
					spFileNames( ep_fin ) := spInpPath + spMySlash + CURPATH_OBJ ;
					spFullFileName := spInpPath + CURPATH_OBJ ;
					pro::storage::ListVersions(
						path        :  spInpPath, 
						objectLabel :  CURPATH_OBJ, 
						VersionSet  :  sVer, 
						VersionSize :  pVerSize, 
						BucketDate  :  spVerFileTimes );
					eVer := last(sVer);
					spFileTimes(ep_fin) := spVerFileTimes(eVer);
					pFileSizes(ep_fin) := PVerSize(eVer);
				endfor ;
			}
			DeclarationSection Argument_Declarations {
				StringParameter spInpPath {
					Property: Input;
				}
				Set sFileNumbers {
					SubsetOf: Integers;
					Index: iFN;
					Property: ElementsAreLabels;
				}
				StringParameter spFileNames {
					IndexDomain: iFN;
					Property: Output;
				}
				StringParameter spFileTimes {
					IndexDomain: iFN;
					Property: Output;
				}
				Parameter pFileSizes {
					IndexDomain: iFN;
					Property: Output;
				}
			}
			DeclarationSection Local_Declarations {
				ElementParameter ep_fin {
					Range: sFileNumbers;
				}
				Parameter ret;
				Parameter res;
				Set sVer {
					Index: iVer;
					Parameter: eVer;
				}
				Parameter pVerSize {
					IndexDomain: iVer;
				}
				StringParameter spVerFileTimes {
					IndexDomain: iVer;
				}
				Set sChildrenObj {
					Index: CURPATH_OBJ;
					Parameter: ChildrenObjElement;
				}
				StringParameter spFullFileName;
				StringParameter spChildrenObjName {
					IndexDomain: CURPATH_OBJ;
				}
				StringParameter spChildrenObjType {
					IndexDomain: CURPATH_OBJ;
				}
				Parameter pChildrenObjSize {
					IndexDomain: CURPATH_OBJ;
				}
				StringParameter spChildrenObjAuth {
					IndexDomain: CURPATH_OBJ;
				}
			}
		}
		Procedure pr_GetAllFiles {
			Arguments: (spInpPath,sFileNumbers,spFileNames,spFileTimes,pFileSizes);
			Body: {
				pr_GetAllDirectories(
					spInpPath            :  spInpPath, 
					sAllDirectoryNumbers :  sAllDirectoryNumbers, 
					spAllDirectoryNames  :  spAllDirectoryNames);
				
				!pr_GetFiles( spInpPath, sLocFilenumbers, 
				!	spLocFilenames, spLocFiletimes, pLocFilesizes );
				!for iLFN do
				!	sFileNumbers += if eFN then val( eFN ) else 0 endif + val( iLFN );
				!	eNFN := last( sFilenumbers );
				!	spFilenames( eNFN ) := spLocFilenames( iLFN );
				!	spFileTimes( eNFN ) := spLocFiletimes( iLFN );
				!	 pFileSizes( eNFN ) :=  pLocFileSizes( iLFN );
				!endfor ;
				
				
				p_noFolders := card( sAllDirectoryNumbers );
				for iADN do
				
					empty sLocFilenumbers ;
					eFN := last( sFileNumbers );
				
					DialogProgress(
						formatString("Phase 2, obtaining files, %e of %i folders handled, %e Files handled", 
						iADN, p_noFolders, eFN),
						100 * ( iADN / p_noFolders ) );
				
					pr_GetFiles( spAllDirectoryNames(iADN), sLocFilenumbers, 
						spLocFilenames, spLocFiletimes, pLocFilesizes );
					for iLFN do
						sFileNumbers += if eFN then val( eFN ) else 0 endif + val( iLFN );
						eNFN := last( sFilenumbers );
						spFilenames( eNFN ) := spLocFilenames( iLFN );
						spFileTimes( eNFN ) := spLocFiletimes( iLFN );
						 pFileSizes( eNFN ) :=  pLocFileSizes( iLFN );
					endfor ;
				
				endfor ;
			}
			DeclarationSection Argument_Declarations {
				StringParameter spInpPath {
					Property: Input;
				}
				Set sFileNumbers {
					SubsetOf: Integers;
					Index: iFN;
					Parameter: eFN, eNFN;
					Property: ElementsAreLabels;
				}
				StringParameter spFileNames {
					IndexDomain: iFN;
					Property: Output;
				}
				StringParameter spFileTimes {
					IndexDomain: iFN;
					Property: Output;
				}
				Parameter pFileSizes {
					IndexDomain: iFN;
					Property: Output;
				}
			}
			DeclarationSection Local_Declarations {
				Set sAllDirectoryNumbers {
					SubsetOf: Integers;
					Index: iADN;
					Parameter: eADN;
					Property: ElementsAreLabels;
				}
				StringParameter spAllDirectoryNames {
					IndexDomain: iADN;
				}
				Set sLocFileNumbers {
					SubsetOf: Integers;
					Index: iLFN;
					Parameter: eLFN;
					Property: ElementsAreLabels;
				}
				StringParameter spLocFilenames {
					IndexDomain: iLFN;
				}
				StringParameter spLocFiletimes {
					IndexDomain: iLFN;
				}
				Parameter pLocFilesizes {
					IndexDomain: iLFN;
				}
				Parameter p_noFolders;
			}
		}
		Procedure NIY {
			Body: {
				raise error "Not Implemented Yet";
			}
		}
	}
	Procedure MainInitialization {
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure PostMainInitialization {
		Body: {
			!ProfilerStart();
			if pro::GetPROEndPoint() then
				pro::Initialize();
				pr_SelectMyData();
			endif ;
		}
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution;
	Procedure PreMainTermination {
		Body: {
			return 1 ;
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Comment: {
				"Expresses the value for the duration of periods.
				
				The unit s has been added automatically because it is a required unit for AimmsProGUI."
			}
		}
	}
}
