## ams_version=1.0

Model Main_InitTerm {
	Section tiny_math_progr {
		Variable x {
			Range: nonnegative;
		}
		Variable y {
			Range: nonnegative;
		}
		Variable o {
			Range: free;
			Definition: 6 * x + 4 * y;
		}
		Constraint xl {
			Definition: x <= 4;
		}
		Constraint yl {
			Definition: y <= 8;
		}
		Constraint xyl {
			Definition: x+y<=10;
		}
		MathematicalProgram mp {
			Objective: o;
			Direction: maximize;
			Constraints: AllConstraints;
			Variables: AllVariables;
			Type: Automatic;
		}
	}
	Section Visiting_order_logging {
		Parameter p_visits {
			InitialData: 0;
		}
		StringParameter sp_visitFileName {
			InitialData: "visit.txt";
		}
		File f_visit {
			Name: sp_visitFileName;
			Device: Disk;
			Mode: merge;
		}
		Procedure pr_log {
			Arguments: (sp_msg);
			Body: {
				if bp_isConnectedToPro then
					if bp_isWorkerSession then
						pro::management::LocalLogInfo(sp_msg);
					else
						if DirectoryExists( "MainProject/Webui" ) then
							pro::management::LocalLogInfo(sp_msg);
						else
							if p_visits = 1 then
								if fileExists( sp_visitFileName ) then
									fileDelete( sp_visitFileName );
								endif ;
							endif ;
							put f_visit ;
							put sp_msg, / ;
							putclose ;
						endif ;
					endif ;
				else
					if p_visits = 1 then
						if fileExists( sp_visitFileName ) then
							fileDelete( sp_visitFileName );
						endif ;
					endif ;
					put f_visit ;
					put sp_msg, / ;
					putclose ;
				endif ;
			}
			StringParameter sp_msg {
				Property: Input;
			}
		}
		Procedure pr_visit {
			Body: {
				p_visits += 1 ;
				sp_node := callerNode(1);
				sp_line := formatString("Visit %2i from: %s", p_visits, sp_node);
				pr_log(sp_line);
			}
			StringParameter sp_node;
			StringParameter sp_line;
		}
	}
	Section Close_open_start_page_for_both_UI_builders {
		Procedure pr_openPageWebUI {
			Body: {
				pr_visit();
			}
		}
		Procedure pr_closePageWebUI {
			Body: {
				pr_visit();
			}
		}
		Procedure pr_openPageWinUI {
			Body: {
				pr_visit();
			}
		}
		Procedure pr_closePageWinUI {
			Body: {
				pr_visit();
			}
		}
	}
	Procedure pr_startup {
		Body: {
			pr_visit();
		}
	}
	Procedure pr_actionFinish {
		Body: {
			pr_visit();
			if pro::GetPROEndPoint() then
				if DirectoryExists( "./MainProject/WebUI" ) then
					pro::sessionmanager::FinishSession();
				else
					PageClose();
					ExitAimms();
				endif ;
			else
				PageClose();
				ExitAimms();
			endif ;
			return 1 ;
		}
	}
	Procedure pr_solve {
		Body: {
			if pro::GetPROEndPoint() then
				if pro::DelegateToServer( waitForCompletion  :  1, 
						completionCallback :  'pro::session::LoadResultsCallBack' ) then  
					return 1;
				endif ;
			endif ;
			
			solve mp ;
		}
	}
	DeclarationSection Session_type {
		Parameter bp_isConnectedToPro;
		Parameter bp_isWorkerSession;
		StringParameter sp_thisSession;
		StringParameter sp_statusBar {
			IndexDomain: (webui::indexApplicationExtension,webui::indexStatusBarSpec);
			Definition: {
				{
					('9', 'header'    ) : "",  
					('9', 'icon'      ) : "aimms-exit",  
					('9', 'color'     ) : "",  
					('9', 'text'      ) : "Bye",  
					('9', 'tooltip'   ) : "",  
					('9', 'procedure' ) : "pr_goodBye",  
					('9', 'state'     ) : "Active"
				}
			}
		}
	}
	Section Application_initialization_execution_and_termination {
		Procedure MainInitialization {
			Body: {
				block ! loop over arguments to find the session id, connectedness to AIMMS PRO, and whether this is a solver session.
					bp_nextArgIsSessionId := 0 ;
					bp_isConnectedToPro := 0 ;
					bp_isWorkerSession := 0 ;
					sp_thisSession := "" ;
					p_argno := 1 ;
					repeat 
						bp_argExists := SessionArgument( p_argno, sp_arg );
						if not bp_argExists then
							break ;
						endif ;
						if bp_nextArgIsSessionId then
							sp_thisSession := sp_arg ;
							break ;
						elseif sp_arg = "_pro-session-id" then
							bp_nextArgIsSessionId := 1 ;
							bp_isWorkerSession := 1 ;
							bp_isConnectedToPro := 1 ;
						elseif sp_arg = "_pro-webui-session-id" then
							bp_nextArgIsSessionId := 1 ;
							bp_isConnectedToPro := 1 ;
						endif ;
						p_argno += 1 ;
					endrepeat ;
				endblock ; 
				
				!profilerStart();
				
				!pr_visit();
			}
			Comment: "Add initialization statements here that do NOT require any library being initialized already.";
			Parameter p_argno;
			Parameter bp_argExists {
				Range: binary;
			}
			StringParameter sp_arg;
			Parameter bp_nextArgIsSessionId {
				Range: binary;
			}
		}
		Procedure PostMainInitialization {
			Body: {
				pr_visit();
			}
			Comment: {
				"Add initialization statements here that require that the libraries are already initialized properly,
				or add statements that require the Data Management module to be initialized."
			}
		}
		Procedure MainExecution {
			Body: {
				pr_visit();
				return 1 ;
			}
		}
		Procedure PreMainTermination {
			Body: {
				pr_visit();
				return 1;
			}
			Comment: {
				"Add termination statements here that require all libraries to be still alive.
				Return 1 if you allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence."
			}
		}
		Procedure MainTermination {
			Body: {
				pr_visit();
				return 1;
			}
			Comment: {
				"Add termination statements here that do not require all libraries to be still alive.
				Return 1 to allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence.
				It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
			}
		}
	}
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: minute->s : #-># * 60;
			Comment: {
				"Expresses the value for the duration of periods.
				
				The unit s has been added automatically because it is a required unit for AimmsWebUI.
				
				The unit minute has been added automatically because it is a required unit for AimmsWebUI."
			}
		}
	}
}
